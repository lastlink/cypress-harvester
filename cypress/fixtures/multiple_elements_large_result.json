{"data":[
    {
        "name": "Browserify",
        "description": "Watches and bundles your spec files via browserify.                            This is the default preprocessor that's built into                            Cypress.",
        "keywords": "#browserify",
        "badge": "official"
    },
    {
        "name": "Cucumber",
        "description": "Run cucumber/gherkin-syntaxed specs with cypress.io",
        "keywords": "#file-watcher#cucumber",
        "badge": "community"
    },
    {
        "name": "cypress-app-watcher-preprocessor",
        "description": "Reruns Cypress tests when the back end server                            restarts",
        "keywords": "#file-watcher",
        "badge": "community"
    },
    {
        "name": "cypress-eslint-preprocessor",
        "description": "Runs linting via ESLint on your spec files as they                            are loaded and display errors in the console",
        "keywords": "#eslint",
        "badge": "community"
    },
    {
        "name": "Watch",
        "description": "Watches your spec files and serves them as-is.                            Useful as an example reference or if you don't need                            transpiling/bundling.",
        "keywords": "#file-watcher",
        "badge": "official"
    },
    {
        "name": "Webpack",
        "description": "Watches and bundles your spec files via webpack.",
        "keywords": "#webpack",
        "badge": "official"
    },
    {
        "name": "Rollup",
        "description": "Watches and bundles your spec files via Rollup",
        "keywords": "#rollup",
        "badge": "community"
    },
    {
        "name": "cypress-markdown-preprocessor",
        "description": "Cypress preprocessor for extracting tests from                            Markdown files",
        "keywords": "#markdown",
        "badge": "community"
    },
    {
        "name": "cypress-rollup-preprocessor",
        "description": "Cypress preprocessor for bundling JavaScript via                            rollup",
        "keywords": "#rollup",
        "badge": "community"
    },
    {
        "name": "@bahmutov/cypress-esbuild-preprocessor",
        "description": "Bundle Cypress specs using esbuild",
        "keywords": "#esbuild",
        "badge": "community"
    },
    {
        "name": "cypress-esbuild-preprocessor",
        "description": "Uses evanw/esbuild to bundle your specs.",
        "keywords": "#esbuild",
        "badge": "community"
    },
    {
        "name": "CircleCI Cypress Orb",
        "description": "Official Cypress Orb for CircleCI configuration.",
        "keywords": "#continuous-integration",
        "badge": "official"
    },
    {
        "name": "cypress-dark",
        "description": "Several color themes for Cypress test runner",
        "keywords": "#theme",
        "badge": "verified"
    },
    {
        "name": "cypress-protobuf",
        "description": "Encode a fixture with Protocol Buffers.",
        "keywords": "#encoding#protobuf",
        "badge": "community"
    },
    {
        "name": "Docker",
        "description": "Docker images providing all the dependencies to run                            Cypress in CI including browsers.",
        "keywords": "#docker#continuous-integration",
        "badge": "official"
    },
    {
        "name": "eslint-plugin-cypress",
        "description": "ESLint plugin that sets globals for writing tests in                            Cypress.",
        "keywords": "#eslint",
        "badge": "official"
    },
    {
        "name": "Knapsack Pro Cypress",
        "description": "Dynamic tests split across parallel CI nodes with                            Knapsack Pro Queue Mode to get faster CI builds.                            Note - this is 3rd party implementation, different                            from the Cypress Dashboard parallelization.",
        "keywords": "#CI parallelisation#continuous-integration",
        "badge": "community"
    },
    {
        "name": "TypeScript",
        "description": "Official TypeScript definitions for the Cypress API.",
        "keywords": "#typescript",
        "badge": "official"
    },
    {
        "name": "cly",
        "description": "A prototype of generating quicker project                            scaffolding for Cypress.",
        "keywords": "#cypress cli#prototype#CLI#scaffolding",
        "badge": "community"
    },
    {
        "name": "cypress-watch-and-reload",
        "description": "Reloads Cypress when one of the watched files                            changes",
        "keywords": "#file-watcher",
        "badge": "community"
    },
    {
        "name": "cypress-autostub",
        "description": "Alleviates the need to mantain brittle manual mocks                            by automating the recording and stubbing of                            requests.",
        "keywords": "#mocking#stubbing#recording#fetch#xhr",
        "badge": "community"
    },
    {
        "name": "cypress-plugin-livereload",
        "description": "Reloads Cypress using livereload",
        "keywords": "#livereload",
        "badge": "community"
    },
    {
        "name": "cypress-select-tests",
        "description": "User space solution for grepping Cypress tests to                            run",
        "keywords": "#browserify",
        "badge": "community"
    },
    {
        "name": "cypress-grep",
        "description": "Filter tests using its title or tags",
        "keywords": "#grep",
        "badge": "community"
    },
    {
        "name": "cypress-autorecord",
        "description": "Simplify API mocking by auto-recording/stubbing HTTP                            interactions and automating the process of                            updating/deleting mocks.",
        "keywords": "#mock#recording#http#integration test",
        "badge": "community"
    },
    {
        "name": "@cypress/code-coverage",
        "description": "Plugin to save code coverage collected during                            Cypress tests",
        "keywords": "#coverage",
        "badge": "official"
    },
    {
        "name": "@cypress/instrument-cra",
        "description": "NPM module for create-react-app applications to                            instrument source code without ejecting                            react-scripts",
        "keywords": "#coverage",
        "badge": "official"
    },
    {
        "name": "@cypress/fiddle",
        "description": "Quickly generates Cypress tests from HTML and JS                            code",
        "keywords": "#prototype",
        "badge": "official"
    },
    {
        "name": "npm-cy",
        "description": "This GitHub Action for npm enables arbitrary actions                            with the npm command-line client, including testing                            with cypress.io and publishing to a registry.",
        "keywords": "#github#actions#npm",
        "badge": "community"
    },
    {
        "name": "vscode-cy-helper",
        "description": "Visual Studio Code extension for cypress and                            cucumber preprocessor",
        "keywords": "#vscode#extension#intellisense",
        "badge": "community"
    },
    {
        "name": "cypress-dotenv",
        "description": "Cypress plugin that enables compatability with                            dotenv.",
        "keywords": "#dotenv#env#environment#env var",
        "badge": "community"
    },
    {
        "name": "cypress-har-generator",
        "description": "Generate HTTP Archive (HAR) while running tests.",
        "keywords": "#har#http-archive#http#websocket#recording#chrome",
        "badge": "community"
    },
    {
        "name": "cypress-expect-n-assertions",
        "description": "Cypress helper that checks number of expected and                            actual assertions in the test",
        "keywords": "#test#assertion",
        "badge": "community"
    },
    {
        "name": "cypress-audit",
        "description": "Run Lighthouse audit directly in your E2E test                            suites",
        "keywords": "#lighthouse",
        "badge": "community"
    },
    {
        "name": "cypress-hmr-restarter",
        "description": "Restarts tests when receiving webpack-dev-server HMR                            updates",
        "keywords": "#webpack#webpack-dev-server#hmr",
        "badge": "community"
    },
    {
        "name": "@bahmutov/cypress-extends",
        "description": "Cypress plugin that adds \"extends\" support to the                            configuration file",
        "keywords": "#config",
        "badge": "community"
    },
    {
        "name": "cypress-browser-permissions",
        "description": "Controls permissions for desktop notifications,                            geolocation, and other browser APIs",
        "keywords": "#permissions#notifications#geolocation#camera#microphone",
        "badge": "community"
    },
    {
        "name": "cypress-repeat",
        "description": "Run Cypress multiple times in a row, great at                            finding test flake",
        "keywords": "",
        "badge": "community"
    },
    {
        "name": "cypress-expect",
        "description": "Cypress CLI wrapper where you can specify the total                            number of expected tests",
        "keywords": "#cli",
        "badge": "community"
    },
    {
        "name": "cy-search",
        "description": "Search Cypress documentation from the terminal",
        "keywords": "#cli",
        "badge": "community"
    },
    {
        "badge": "",
        "name": "cypress-tags",
        "description": "Use custom tags to slice up Cypress test runs",
        "keywords": "#test#tag#browserify"
    },
    {
        "name": "@swimlane/cy-mockapi",
        "description": "Easily mock your REST API in Cypress by putting                            responses in the fixtures directory tree.",
        "keywords": "#mock#rest#api",
        "badge": "community"
    },
    {
        "name": "cypress-timings",
        "description": "A Cypress plugin for reporting individual command                            timings.",
        "keywords": "#commands#performance",
        "badge": "community"
    },
    {
        "name": "cypress-fail-fast",
        "description": "Enables fail fast in Cypress, skipping the rest of                            tests on first failure.",
        "keywords": "#fail-fast#failure#skip#config",
        "badge": "community"
    },
    {
        "name": "cypress-fail-on-console-error",
        "description": "Fail cypress test on console error.",
        "keywords": "#console#error#fail",
        "badge": "community"
    },
    {
        "name": "cy-view",
        "description": "Run tests on multiple URLs at various viewport                            sizes.",
        "keywords": "#viewports",
        "badge": "community"
    },
    {
        "name": "cypress-unfetch",
        "description": "Track, test, and block code execution based on                            network state.",
        "keywords": "#commands#routing#networking",
        "badge": "verified"
    },
    {
        "name": "cypress-redux",
        "description": "Run assertions against Redux stores.",
        "keywords": "#commands#redux",
        "badge": "community"
    },
    {
        "name": "cypress-axe",
        "description": "Helps test your applications for accessibility                            issues using axe-core.",
        "keywords": "#accessibility#a11y",
        "badge": "community"
    },
    {
        "name": "cypress-drag-drop",
        "description": "Adds a cypress child command for drag'n'drop                            support.",
        "keywords": "#dragndrop#drag#drop#commands",
        "badge": "community"
    },
    {
        "name": "cypress-file-upload",
        "description": "Simple custom command to ease file upload testing",
        "keywords": "#fileupload#file#upload#commands",
        "badge": "community"
    },
    {
        "name": "cypress-fill-command",
        "description": "A Cypress command for fill inputs",
        "keywords": "#commands",
        "badge": "community"
    },
    {
        "name": "cypress-firebase",
        "description": "Custom commands for Firebase including                            Authentication and Database communication (both Real                            Time Database and Firestore).",
        "keywords": "#firebase#database#commands",
        "badge": "community"
    },
    {
        "name": "cypress-graphql-mock-network",
        "description": "Custom commands to mock your GraphQL API at the                            network level. Using service-workers for complete                            isolation of the mock server.",
        "keywords": "#graphql#mocking#networking#commands",
        "badge": "community"
    },
    {
        "name": "cypress-graphql-mock",
        "description": "Adds commands for executing a mocked GraphQL server                            using only the client",
        "keywords": "#graphql",
        "badge": "community"
    },
    {
        "name": "cy-mobile-commands",
        "description": "Mobile testing helper for Cypress",
        "keywords": "#mobile#swipe#touch#commands",
        "badge": "community"
    },
    {
        "name": "cypress-pipe",
        "description": "Create custom commands using plain-old functions.                            Similar to `cy.then` but with retriability.",
        "keywords": "#commands",
        "badge": "community"
    },
    {
        "name": "cypress-downloadfile",
        "description": "A custom command to download different kinds of                            files and store them on your local machine",
        "keywords": "#commands#downloading",
        "badge": "community"
    },
    {
        "name": "cypress-testing-library",
        "description": "🐅 Simple and complete custom Cypress commands and                            utilities that encourage good testing practices.",
        "keywords": "#testing-library#dom-testing-library#react-testing-library",
        "badge": "verified"
    },
    {
        "name": "cypress-plugin-stripe-elements",
        "description": "Simple commands that make it easy to target and fill                            in Stripe Elements input fields",
        "keywords": "#stripe#commands#elements#inputs",
        "badge": "community"
    },
    {
        "name": "cypress-xpath",
        "description": "Adds XPath command. This repo is also a good example                            of using custom commands to do retries, provide                            TypeScript definitions, etc.",
        "keywords": "#xpath#commands",
        "badge": "official"
    },
    {
        "name": "cypressautomocker",
        "description": "Allow recording API results and replaying the APIs                            as a mock server.",
        "keywords": "#routing#mock",
        "badge": "community"
    },
    {
        "name": "cypress-plugin-tab",
        "description": "A Cypress plugin to add a tab command",
        "keywords": "#commands",
        "badge": "experimental"
    },
    {
        "name": "cypress-commands",
        "description": "A collection of Cypress commands to extend and                            complement the defaults",
        "keywords": "#commands",
        "badge": "community"
    },
    {
        "name": "cypress-wait-until",
        "description": "Add the Cypress waiting power to virtually                            everything 🎉",
        "keywords": "#commands#wait#wait-until#recursive-promise#check-async-value#check-value#open-source-saturday",
        "badge": "verified"
    },
    {
        "name": "cypress-recurse",
        "description": "A way to re-run Cypress commands until a predicate                            function returns true",
        "keywords": "#commands#wait#wait-until#recursive-promise#check-async-value#check-value",
        "badge": "community"
    },
    {
        "name": "cypress-cy-select",
        "description": "data-cy shorthand notation for cypress get and find                            functions",
        "keywords": "#commands#shorthand",
        "badge": "community"
    },
    {
        "name": "@cypress/skip-test",
        "description": "Simple commands to skip a test based on platform,                            browser or a url",
        "keywords": "#commands",
        "badge": "official"
    },
    {
        "name": "cypress-websocket-testing",
        "description": "Test WebSocket connections with Cypress",
        "keywords": "#commands#websocket",
        "badge": "community"
    },
    {
        "name": "@bahmutov/cy-api",
        "description": "Cypress custom command \"cy.api\" for HTTP API testing                            with server logs",
        "keywords": "#api",
        "badge": "community"
    },
    {
        "name": "cy-spok",
        "description": "Adds assertions from Spok library for easy schema                            and value validations",
        "keywords": "#assertions",
        "badge": "experimental"
    },
    {
        "name": "cypress-localstorage-commands",
        "description": "Custom commands for localStorage. Allows preserving                            localStorage between tests",
        "keywords": "#commands#localstorage#persistence",
        "badge": "community"
    },
    {
        "name": "cypress-iframe",
        "description": "Custom commands for interacting with iframes",
        "keywords": "#commands#iframe",
        "badge": "community"
    },
    {
        "badge": "",
        "name": "cypress-react-selector",
        "description": "cypress custom commands to locate react elements by                            component, props and state",
        "keywords": "#react#commands#locator"
    },
    {
        "name": "cypress-layout-inspector",
        "description": "A simple utility to provide layout testing                            functionality to Cypress via custom assertions.",
        "keywords": "#testing#ui#dom#assertions",
        "badge": "community"
    },
    {
        "name": "@swimlane/cy-dom-diff",
        "description": "cy-dom-diff allows matching chunks of DOM against                            HTML; including dynamic content.",
        "keywords": "#dom#assertions",
        "badge": "community"
    },
    {
        "name": "cypress-real-events",
        "description": "Fire native system events from Cypress like hover,                            swipe, etc",
        "keywords": "#commands",
        "badge": "community"
    },
    {
        "name": "cypress-azure-keyvault",
        "description": "Cypress custom command to get keys from Azure Key                            Vaults.",
        "keywords": "#testing#azure#keyvault#secret",
        "badge": "community"
    },
    {
        "name": "cypress-rest-graphql",
        "description": "Add visual output and helper functions for                            performing REST and graphQL queries",
        "keywords": "#api#rest#graphQL",
        "badge": "community"
    },
    {
        "name": "cyphell",
        "description": "Converts WDIO automation tests to Cypress.",
        "keywords": "#wdio",
        "badge": "community"
    },
    {
        "name": "cypress-capybara",
        "description": "Several Capybara finders re-implemented in Cypress                            to locate UI elements by their text and labels.",
        "keywords": "#testing-library#capybara",
        "badge": "community"
    },
    {
        "name": "cypress-jest-adapter",
        "description": "Add jest assertion style to Cypress expect command",
        "keywords": "#jest",
        "badge": "community"
    },
    {
        "name": "PickleJS",
        "description": "An addition to the Cucumber plugin, featuring a                            collection of phrases you can use for common actions                            (ex: \"I click on an <Element>\", \"I should see an                            <Element>\")",
        "keywords": "#cucumber#collection#actions#commands",
        "badge": "community"
    },
    {
        "name": "cypress-keycloak-commands",
        "description": "Cypress commands for authenticate users with                            Keycloak Identity Provider",
        "keywords": "#authentication#login#keycloak#oauth#openid",
        "badge": "verified"
    },
    {
        "name": "cypress-ntlm-auth",
        "description": "NTLM authentication support for Cypress",
        "keywords": "#authentication#ntlm",
        "badge": "verified"
    },
    {
        "name": "cypress-otp",
        "description": "Valid OTP token generation for Cypress",
        "keywords": "#authentication#otp#2fa#mfa",
        "badge": "community"
    },
    {
        "name": "cypress-social-logins",
        "description": "Cypress authentication flows using social network                            providers",
        "keywords": "#authentication#login#social profiles#github#google",
        "badge": "community"
    },
    {
        "name": "Cypress Angular Schematic",
        "description": "Angular CLI addition that allows you to install                            Cypress E2E to an Angular CLI project",
        "keywords": "#angular#cli",
        "badge": "community"
    },
    {
        "name": "cypress-on-rails",
        "description": "Rubygem for using cypress.io with Ruby on Rails                            applications",
        "keywords": "#ruby-rack#ruby-on-rails",
        "badge": "community"
    },
    {
        "name": "Nx",
        "description": "Nrwl Extensions for Angular",
        "keywords": "#angular#cli",
        "badge": "community"
    },
    {
        "name": "Vue CLI",
        "description": "Vue CLI allows you to scaffold an application with                            Cypress E2E fully configured",
        "keywords": "#vue.js#vue#cli",
        "badge": "verified"
    },
    {
        "name": "Cypress Nuxt",
        "description": "Utilities for using Cypress with Nuxt.",
        "keywords": "#vue.js#vue#nuxt#nuxt.js",
        "badge": "community"
    },
    {
        "name": "Aurelia CLI",
        "description": "The Aurelia CLI is the official command line tool                            for Aurelia.",
        "keywords": "#aurelia#cli",
        "badge": "community"
    },
    {
        "name": "WordPress ReactJS Boilerplate",
        "description": "Complete WordPress Plugin Boilerplate including                            Cypress.io E2E tests.",
        "keywords": "#wp#wordpress",
        "badge": "community"
    },
    {
        "name": "Next Right Now - Next.js Boilerplate",
        "description": "Next.js boilerplate with Jest/Cypress and CI/CD                            pipeline built-in (monorepo, multi-tenants)",
        "keywords": "#next.js#react#monorepo#multi-tenants",
        "badge": "community"
    },
    {
        "name": "Elm Batteries Included",
        "description": "A project template to learn how Elm, Parcel, Cypress                            and Netlify work together.",
        "keywords": "#elm#parcel#netlify",
        "badge": "community"
    },
    {
        "name": "cypress-rails",
        "description": "Ruby gem to run Cypress against Rails apps,                            replacing Capybara in system tests",
        "keywords": "#ruby#rails",
        "badge": "community"
    },
    {
        "name": "cypress-laravel",
        "description": "Add commands and hooks to test Laravel applications",
        "keywords": "#php#laravel",
        "badge": "community"
    },
    {
        "name": "cypress-splitio",
        "description": "Stores your split.io toggles as environment                            variables. Helps to decide which e2e tests you need                            to run.",
        "keywords": "#split.io#feature flags",
        "badge": "community"
    },
    {
        "name": "Bison",
        "description": "A Full Stack Jamstack Template that uses Cypress and                            GitHub Actions for E2E testing.",
        "keywords": "#next.js#react#graphql#prisma#vercel",
        "badge": "community"
    },
    {
        "name": "@cypress/schematic",
        "description": "Adds Cypress to your Angular project via the Angular                            CLI",
        "keywords": "#angular#cli",
        "badge": "official"
    },
    {
        "name": "cypress-angular-unit-test",
        "description": "Test Angular component using Cypress Test Runner",
        "keywords": "#component#angular",
        "badge": "experimental"
    },
    {
        "name": "cypress-angularjs-unit-test",
        "description": "Unit test Angularjs code using Cypress Test Runner",
        "keywords": "#component#angular.js",
        "badge": "experimental"
    },
    {
        "name": "cypress-cycle-unit-test",
        "description": "Test Cycle.js components using Cypress Test Runner",
        "keywords": "#component#cycle.js",
        "badge": "experimental"
    },
    {
        "name": "cypress-hyperapp-unit-test",
        "description": "Test Hyperapp components and applications using                            Cypress Test Runner",
        "keywords": "#component#hyperapp",
        "badge": "experimental"
    },
    {
        "name": "@cypress/react",
        "description": "Test React components using Cypress Test Runner",
        "keywords": "#component#react",
        "badge": "experimental"
    },
    {
        "name": "cypress-svelte-unit-test",
        "description": "Test Svelte components using Cypress Test Runner",
        "keywords": "#component#svelte",
        "badge": "experimental"
    },
    {
        "name": "@cypress/vue",
        "description": "Test Vue.js components using Cypress Test Runner",
        "keywords": "#component#vue#vue.js",
        "badge": "experimental"
    },
    {
        "name": "Applitools",
        "description": "Fast, easy and reliable visual UI testing with                            Cypress",
        "keywords": "",
        "badge": "verified"
    },
    {
        "name": "Percy",
        "description": "Visual regression testing for Cypress tests with                            Percy.",
        "keywords": "#screenshots#visual regression",
        "badge": "verified"
    },
    {
        "name": "Happo",
        "description": "Cross-platform, cross-browser screenshot testing for                            modern user interfaces.",
        "keywords": "#screenshots#visual regression",
        "badge": "community"
    },
    {
        "name": "cypress-plugin-snapshots",
        "description": "Plugin for snapshot tests in Cypress. Same API as                            Jest, but with graphical interface for reviewing and                            approving changes.",
        "keywords": "#snapshot",
        "badge": "community"
    },
    {
        "name": "Cypress Image Snapshot",
        "description": "Catch visual regressions and compare image diffs                            locally and in Cypress Dashboard.",
        "keywords": "#image-diff#snapshot",
        "badge": "community"
    },
    {
        "name": "Cypress Visual Regression",
        "description": "Adds visual regression testing to Cypress",
        "keywords": "#image-diff#snapshot",
        "badge": "community"
    },
    {
        "name": "cypress-blink-test",
        "description": "Module for adding visual regression testing to                            Cypress.",
        "keywords": "#image-diff#snapshot",
        "badge": "community"
    },
    {
        "name": "Visual Regression Tracker",
        "description": "Integration with open source service for visual                            testing and managing its results.",
        "keywords": "#screenshots#image-diff#visual regression",
        "badge": "community"
    },
    {
        "name": "Cypress Image Diff",
        "description": "Visual regression testing plugin maintained by DIT -                            UK Gov.",
        "keywords": "#screenshots#visual regression#image-diff",
        "badge": "community"
    },
    {
        "name": "Micoo",
        "description": "Cypress plugin for doing visual regression testing                            with Micoo service",
        "keywords": "#visual regression testing#visual testing#screenshots comparison#testing service",
        "badge": "community"
    },
    {
        "name": "cypress-failed-log",
        "description": "Saves the Cypress test command log as a JSON file if                            a test fails.",
        "keywords": "#reporter",
        "badge": "community"
    },
    {
        "name": "cypress-log-to-output",
        "description": "Plugin that prints all browser console logs to the                            terminal while running Cypress tests. Currently,                            only Chrome is supported.",
        "keywords": "#logging",
        "badge": "community"
    },
    {
        "name": "autoset-status-cypress-testrail-reporter",
        "description": "TestRail Reporter which auto-set status for specific                            TestRun for Cypress.",
        "keywords": "#testrail#reporter#autoset#status",
        "badge": "community"
    },
    {
        "name": "cypress-testrail-reporter",
        "description": "Custom reporter for publishing Cypress results to a                            TestRail test run.",
        "keywords": "#testrail#reporter",
        "badge": "community"
    },
    {
        "name": "cypress-teamcity-reporter",
        "description": "Custom reporter for Teamcity which makes it possible                            to display test results in real-time and add them on                            the Tests tab of the Build Results page",
        "keywords": "#teamcity#reporter",
        "badge": "community"
    },
    {
        "name": "mochawesome-merge",
        "description": "Merges multiple mochawesome JSON reports",
        "keywords": "#reporter#mochawesome",
        "badge": "community"
    },
    {
        "name": "cypress-slack-healthcheck",
        "description": "A simple tool which integrates Cypress with Slack to                            report failing tests.",
        "keywords": "#reporter#slack#healthcheck",
        "badge": "community"
    },
    {
        "name": "cypress-slack-reporter",
        "description": "Slack reporting tool. Uses mochawesome json reports,                            provides links to VCS Provider (github/bitbucket)                            and CircleCI logs",
        "keywords": "#reporter#mochawesome#slack",
        "badge": "community"
    },
    {
        "name": "cypress-terminal-report",
        "description": "Logs cypress commands, route request data and                            browser console errors and warnings to terminal when                            tests fail on CI.",
        "keywords": "#reporter#logs#terminal#CI#CLI",
        "badge": "community"
    },
    {
        "name": "cypress-allure-plugin",
        "description": "Integrates Allure reporter with Cypress. Command                            logging and screenshot attachment out of the box.",
        "keywords": "#reporter#allure",
        "badge": "community"
    },
    {
        "name": "cypress-mochawesome-reporter",
        "description": "Zero config Mochawesome reporter for Cypress with                            screenshots.",
        "keywords": "#reporter#mochawesome#screenshot",
        "badge": "community"
    },
    {
        "name": "cypress-msteams-reporter",
        "description": "A reporting tool which sends a message to Microsoft                            Teams with information about the latest cypress test                            execution results.",
        "keywords": "#reporter#ms-teams#allure-report",
        "badge": "community"
    },
    {
        "name": "cypress-mailosaur",
        "description": "Test email and SMS messages using Mailosaur",
        "keywords": "#email#sms#commands",
        "badge": "community"
    },
    {
        "name": "cypress-maildev",
        "description": "A bunch of Cypress commands in order to test your                            messages (SMS and Emails) by using Maildev REST API.",
        "keywords": "#email#sms#commands",
        "badge": "community"
    },
    {
        "name": "cypress-mailslurp",
        "description": "Use test email accounts to send and receive emails                            in Cypress tests with MailSlurp.",
        "keywords": "#email#mailslurp#test#commands",
        "badge": "community"
    }
]}